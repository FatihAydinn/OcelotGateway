Blank Solution oluşturulur
ApiGateway adında klasör oluşturulur içerisine;
OcelotApiGateway adında api oluşturulur.

Nuget Package Manager'dan inidirlmesi gereken eklentiler.
-Ocelot
-Ocelot.Cache.CacheManager

ocelot.js adında bir json file dosyası oluşturulur. (Gateway)
içerisine eklenecek kodlar;

{
  //program ayağa kalkarken aşağıda belirtilen portu kullanarak çalışacak
  "GlobalConfiguration": {
    "BaseUrl": "https://localhost:5003"
  },
  //erişilecek olan apilerin port bilgileri
  "Routes": [
    {
      //hedef api çalıştırıldığında kendisinin localhost portu yerie
      //yukarıda tanımlanan portu kullanacak
      "UpstreamPathTemplate": "/gateway/products",
      "UpstreamHttpMethod": [ "Get" ],
      "DownstreamPathTemplate": "/api/products",
      "DownstreamScheme": "https",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": 5005
        }
      ],
      "FileCacheOptions": {
        "TtlSeconds": 10
      }
    },
    //belirtilen ID ye özel veriye erişebilmek için;
    {
      "UpstreamPathTemplate": "/gateway/products/{id}",
      "UpstreamHttpMethod": [ "Get" ],
      "DownstreamPathTemplate": "/api/products/{id}",
      "DownstreamScheme": "https",
      "DownstreamHostAndPorts": [
        {
          "Host": "localhost",
          "Port": 5005
        }
      ]
    }
  ]
}
-------------------------------------------------------------------------------------------------------------
Program.cs içerisinde AddSwaggerGen altına eklenecek kodlar;

builder.Configuration.AddJsonFile("ocelot.json", optional: false, reloadOnChange: true);
builder.Services.AddOcelot(builder.Configuration).AddCacheManager(x =>
    {
        x.WithDictionaryHandle();
    });

app.Run kodunun üstüne eklecek kod;

await app.UseOcelot();

-------------------------------------------------------------------------------------------------------------
						  ~ Ocelot Sonu ~
-------------------------------------------------------------------------------------------------------------

Product adında klasör oluşturulur içerisine Product.API oluşturulur.
-Models klasörü içerisine DbContext ve Product.cs oluşturulur.
-------------------------------------------------------------------------------------------------------------
	public class Product
    {
        public int ID { get; set; }
        public string Title { get; set; }

        public Product() { }

        //constructor bir classtan nesne oluştururken içindeki değişkenlere değer atamanızı sağlar
        public Product(int id, string title)
        {
            this.ID = id;
            this.Title = title;
        }
    }

-------------------------------------------------------------------------------------------------------------

	public class ProductsDbContext : DbContext
    {
        public ProductsDbContext(DbContextOptions<ProductsDbContext> options) : base(options)
        {

        }
        public DbSet<Product> Products { get; set; }

        //
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Product>().ToTable("Product");
        }
    }
-------------------------------------------------------------------------------------------------------------
appsettings.json içerisine ConntecionString bağlantısı eklenir;
"ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=OcelotProductDB;Trusted_Connection=True;MultipleActiveResultSets=True"

-------------------------------------------------------------------------------------------------------------
Program.cs içerisinde builder.Services.AddSwaggerGen altına eklenecek kodlar

var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
builder.Services.AddDbContext<ProductsDbContext>(options => options.UseSqlServer(connectionString));

-------------------------------------------------------------------------------------------------------------
Veritabanı bağlantı kodlarının tamamlanmasının ardından migration işlemi yapılır
Package Manager Console > add-migration DatabaseInit > update-database

-------------------------------------------------------------------------------------------------------------
Controller ile read/write API oluşturulur

namespace Product.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ProductsController : ControllerBase
    {

        private readonly ProductsDbContext context;
        //Construstor Injection
        public ProductsController(ProductsDbContext context)
        {
            this.context = context;
        }


        // GET: api/<ProductsController>
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Models.Product>>> ProductList()
        {
            List<Models.Product> ProductList = await context.Products.ToListAsync();
            return ProductList;
        }

        // GET api/<ProductsController>/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Models.Product>> GetProduct(int id)
        {
            //Veri tabanında ==> select * from where Product ID=id //komutunu çalıştıracak
            var Product = await context.Products.FindAsync(id);
            if (Product == null)
            {
                return NotFound();
            }
            return Product;
        }

        // POST api/<ProductsController>
        [HttpPost]
        public async Task<ActionResult<IEnumerable<Models.Product>>> AddProduct(Models.Product Product)
        {
            //insert into Product() values(Product.ID,Product.Name)
            context.Products.Add(Product);
            try
            {
                await context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                ex.Message.ToString();
            }
            return CreatedAtAction("GetProduct", new { id = Product.ID }, Product);
            //eklenen değeri detayını getirecek olan kod
        }

        // PUT api/<ProductsController>/5
        [HttpPut("{id}")]
        public async Task<ActionResult<IEnumerable<Models.Product>>> ProductUpdate(Models.Product Product)
        {
            context.Entry(Product).State = EntityState.Modified;
            try
            {
                await context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                ex.Message.ToString();
            }
            return CreatedAtAction("GetProduct", new { id = Product.ID }, Product);
        }

        // DELETE api/<ProductsController>/5
        [HttpDelete("{id}")]
        public async Task<ActionResult<Models.Product>> ProductDelete(int id)
        {
            var Product = await context.Products.FindAsync(id);
            if (Product == null) { return NotFound(); }
            context.Products.Remove(Product);
            await context.SaveChangesAsync();
            return Product;
        }
    }
}

-------------------------------------------------------------------------------------------------------------

launchSettings içerisinde profiles'e dahil olan kodlar değiştirilir ve altında ki kodların tamamı silinir;

  "profiles": {
    "Product.Api": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "launchUrl": "swagger",
      "applicationUrl": "https://localhost:5005",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }


